#!/usr/bin/env python

__author__ = 'AR'

import os, hashlib, json, sys, time
from collections import Counter
from datetime  import datetime as dt

nGram = 7

# Usage Message
if len(os.sys.argv) < 5:
    print "Usage: ./featureExtractor -f <source to folder with strace files> -o <destination to store output files>"
    os.sys.exit()

for i in xrange(len(sys.argv)):
    if sys.argv[i] == '-f':
        sourcePath = sys.argv[i + 1]  # Path to folder containing strace files
    if sys.argv[i] == '-o':
        destPath = sys.argv[i + 1]

# Returns all system calls from strace output file
def getUniqSysCalls(straceFile):
    with open(straceFile) as file:
        syscalls = [ln.split('(', 1)[0] for ln in file if (ln.find('(') != -1)]
        return syscalls

# Returns list of overlapping n-gram features
def returnNGramFeature(sysCallsList):
    global nGram
    returningSet = []
    for index in range(0, len(sysCallsList) - nGram, 3):
        if sysCallsList[index: index + nGram] not in returningSet:
            returningSet.append(sysCallsList[index: index + nGram])
    return returningSet

def main():

    # Initial Declaration of all variables
    sysCallsList = []
    nGramFeatureList = []
    uniqueFeaturesList = []
    featureList = []
    featureHashList = []
    featureFrequencyList = []
    sortedFFList = []
    sysCallCounter = []
    callsList = []


    # Get name of the strace files from the strace files folder
    files = [x for x in os.listdir(sourcePath) if x.endswith('.trace')]

    # Extract all syscalls from the strace file and add it to list
    for f in files:
        strace = os.path.join(sourcePath, f)
        sysCallsList.append(getUniqSysCalls(strace))
    # print sysCallsList[0][0]
    for entry in sysCallsList:
        for call in entry:
            callsList.append(call)

    sysCallCounter.append(Counter(callsList))
    # # print len(sysCallCounter), 
    # print 
    # # print set(callsList), 
    # print 
    # print 
    # print sysCallCounter[0]


    # Find ovelapping n-Gram syscalls and add them it to list
    for feature in sysCallsList:
        nGramFeatureList.append(returnNGramFeature(feature))

    # Save the feature list containing n-Gram syscall for every file to output json file
    featureDict = {"featureList" : nGramFeatureList}
    with open(destPath + str(nGram) + 'featureList.json', 'w') as featureListFile:
        json.dump(featureDict, featureListFile)

    # Collecting all n-Gram syscalls from all files 
    for f1 in nGramFeatureList:
        for f in f1:
            featureList.append(f)

    # Removing the duplicate features from collection of features
    for i in featureList:
        if i not in uniqueFeaturesList:
            uniqueFeaturesList.append(i)

    # Find the unique syscalls along with number of times it occured in the featureList
    for i in uniqueFeaturesList:
        count = 0
        for j in featureList:
            if i == j:
                count += 1
        featureFrequencyList.append((i, count))
    sortedFFList = sorted(featureFrequencyList, key=lambda tup: tup[1], reverse=True)

    # Creating SHA1 hash for all the unique features
    m = hashlib.sha256()
    for list in uniqueFeaturesList:
        m.update(str(list))
        featureHashList.append(m.hexdigest())
    hashDict = {"featureHashList": featureHashList}

    # Save the hash values for unique syscalls to json file
    with open(destPath + str(nGram) +'gramFeatureHashList.json', 'w') as featurehashFile:
        json.dump(hashDict, featurehashFile)


    # Printing the results for testing

    # print 'SHA256 value for first feature: {0:1s}'.format(featureHashList[0])
    # print 
    # print 'Number of unique features: {0:8d}'.format(len(uniqueFeaturesList))
    # print 
    # print sortedFFList[:10]
    print 
    # raw_input('')
    print '{0:70s} {1:20.20s}\n'.format('Feature', 'SHA256 Hash')
    for i in xrange(5):
        print '{0:70s} {1:20.20s}\n'.format(sortedFFList[i][0], featureHashList[i][:16] + '...')
    print
    print 'Total # of unique features =', len(uniqueFeaturesList)
    print


    #Calculate the jaccord distance for pair of malware samples using scipy
def calculateJaccardDistance(distanceMatrix):
    returnArray = []
    tempArray = []
    j = 0
    for index in range(len(distanceMatrix)):
        for index2 in range(1, len(distanceMatrix)):
            j = jaccard(distanceMatrix[index], distanceMatrix[index2])
            tempArray.append(round(j, 2))
        returnArray.append(tempArray)
        tempArray = []
    return returnArray



def calculateDistanceMatrix(newList, featureList):
    #Finding Distance matrix for all samples
    matrixList = []
    for index in range(len(newList)):
        if newList[index] in returnFeatureSet(featureList):
            matrixList.append(1)
        else:
            matrixList.append(0)
    return matrixList


if __name__ == '__main__':
    start = dt.now()
    print '\n{:*^90}'.format(" Machine Learning and Malware Classification ")
    main()
    # print '{:*^90}'.format(' Output Files stored in ' + destPath + ' directory ')
    end = dt.now() 
    print '{:*^90}\n'.format(' EOP Program took ' + str(end - start)[:10] + ' to complete ')